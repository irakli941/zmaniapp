//
//  ListStoresInteractorTests.swift
//  DonnaApp
//
//  Created by Irakli on 11/15/19.
//  Copyright (c) 2019 Irakli. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import zmani
import XCTest

class ListStoresInteractorTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: ListStoresInteractor!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        setupListStoresInteractor()
    }
    
    override func tearDown()
    {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupListStoresInteractor()
    {
        sut = ListStoresInteractor()
    }
    
    // MARK: Test doubles
    
    class ListStoresPresentationLogicSpy: ListStoresPresentationLogic
    {
        var presentFetchedStoresCalled = false
        
        func presentFetchedStores(response: ListStores.FetchStores.Response)
        {
            presentFetchedStoresCalled = true
        }
    }
    
    class ListStoresWorkerSpy: ListStoresWorker
    {
        var fetchStoresCalled = false
        
        override func fetchStores(completionHandler: @escaping ([Store]) -> Void)
        {
            fetchStoresCalled = true
            let store = Store(name: "zara", image: "zara")
            var fetchedStores: [Store] = []
            fetchedStores.append(store)
            completionHandler(fetchedStores)
        }
    }
    
    func testFetchStoresShouldAskWorkerToFetchStores()
    {
        // Given
        let spy = ListStoresWorkerSpy()
        sut.worker = spy
        let request = ListStores.FetchStores.Request()
        
        // When
        sut.fetchStores(request: request)
        
        // Then
        XCTAssertTrue(spy.fetchStoresCalled, "FetchStores() should ask the worker to fetch stores")
    }
    
    // MARK: Tests
    
    func testFetchStoresShouldAskPresenterToFormatResult()
    {
        // Given
        let spy = ListStoresPresentationLogicSpy()
        sut.presenter = spy
        let request = ListStores.FetchStores.Request()
        
        // When
        sut.fetchStores(request: request)
        
        // Then
        XCTAssertTrue(spy.presentFetchedStoresCalled, "fetchStores(request:) should ask the presenter to format the result")
    }

}
