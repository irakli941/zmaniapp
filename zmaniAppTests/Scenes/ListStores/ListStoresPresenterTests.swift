//
//  ListStoresPresenterTests.swift
//  DonnaApp
//
//  Created by Irakli on 11/15/19.
//  Copyright (c) 2019 Irakli. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import zmani
import XCTest

class ListStoresPresenterTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: ListStoresPresenter!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        setupListStoresPresenter()
    }
    
    override func tearDown()
    {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupListStoresPresenter()
    {
        sut = ListStoresPresenter()
    }
    
    // MARK: Test doubles
    
    class ListStoresDisplayLogicSpy: ListStoresDisplayLogic
    {
        var displayStoresCalled = false
        var viewModel: ListStores.FetchStores.ViewModel!
        func displayFetchedStores(viewModel: ListStores.FetchStores.ViewModel)
        {
            displayStoresCalled = true
            self.viewModel = viewModel
        }
    }
    
    // MARK: Tests
    
    func testPresentFetchedStoresShouldAskViewControllerToDisplayFetchedStores()
    {
        // Given
        let spy = ListStoresDisplayLogicSpy()
        sut.viewController = spy
        let response = ListStores.FetchStores.Response(fetchedStores: [Seeds.Stores.AnyStore])
        
        // When
        sut.presentFetchedStores(response: response)
        
        // Then
        XCTAssertTrue(spy.displayStoresCalled, "presentSomething(response:) should ask the view controller to display the result")
    }
    
    func testPresentFetchedStoresShouldFormatFetchedStoresForDisplay()
    {
        // Given
        let spy = ListStoresDisplayLogicSpy()
        let seedStore = Seeds.Stores.AnyStore
        let response = ListStores.FetchStores.Response(fetchedStores: [seedStore])
        sut.viewController = spy
        
        // When
        sut.presentFetchedStores(response: response)
        
        // Then
        
        for displayedStore in spy.viewModel.displayedStores {
            XCTAssertEqual(displayedStore.image, "any", "presenting fetched stores should properly format image")
            XCTAssertEqual(displayedStore.title, "any", "presenting fetched stores should properly format image")
        }   
    }
}
