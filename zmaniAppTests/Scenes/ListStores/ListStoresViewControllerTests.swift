//
//  ListStoresViewControllerTests.swift
//  DonnaApp
//
//  Created by Irakli on 11/15/19.
//  Copyright (c) 2019 Irakli. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import zmani
import XCTest

class ListStoresViewControllerTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: ListStoresViewController!
    var window: UIWindow!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        window = UIWindow()
        setupListStoresViewController()
    }
    
    override func tearDown()
    {
        window = nil
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupListStoresViewController()
    {
        let bundle = Bundle.main
        let storyboard = UIStoryboard(name: "Main", bundle: bundle)
        sut = (storyboard.instantiateViewController(withIdentifier: "ListStoresViewController") as! ListStoresViewController)
    }
    
    func loadView()
    {
        window.addSubview(sut.view)
        sut.preloadView()
    }
    
    
    // MARK: Test doubles
    
    class ListStoresBusinessLogicSpy: ListStoresBusinessLogic
    {
        var fetchStoresCalled = false
        
        func fetchStores(request: ListStores.FetchStores.Request) {
            fetchStoresCalled = true
        }
    }
    
    class CollectionViewSpy: UICollectionView
    {
        var reloadDataCalled = false
        
        override func reloadData() {
            reloadDataCalled = true
        }
    }
    
    // MARK: Test
    func testShouldFetchStoresWhenViewWillAppear()
    {
        // Given
        let spy = ListStoresBusinessLogicSpy()
        sut.interactor = spy
        
        // When
        loadView()
        
        // Then
        XCTAssertTrue(spy.fetchStoresCalled, "viewWillAppear should call fetchStores:")
    }
    
    func testCollectionViewNumberOfRowsShouldEqualToFetchedStores()
    {
        // Given
        let spy = ListStoresBusinessLogicSpy()
        sut.interactor = spy
        sut.fetchedStores = Seeds.DisplayedStores.DummyStores
        
        // When
        loadView()
        
        //Then
        XCTAssertEqual(sut.storesCollectionView.numberOfItems(inSection: 0), sut.fetchedStores!.count, "collectionView rows and fetchedStores count should equal")
    }
    
    func testFetchStoresShouldReloadData()
    {
        // Given
        let viewModel = ListStores.FetchStores.ViewModel(displayedStores: Seeds.DisplayedStores.DummyStores)
        let collectionViewSpy = getConfiguredCollectionViewSpy()
        sut.storesCollectionView = collectionViewSpy
        
        // When
        sut.displayFetchedStores(viewModel: viewModel)
        
        // Then
        XCTAssertTrue(collectionViewSpy.reloadDataCalled, "fetchStores: should reload data")
        
    }
    
    func testShouldConfigureTableViewCellToDisplayOrder()
    {
        // Given
        loadView()
        sut.fetchedStores = Seeds.DisplayedStores.DummyStores
        // When
        sut.view.layoutIfNeeded() //CELL IS NIL WITHOUT THIS
        let indexPath = IndexPath(row: 0, section: 0)
        
        
        let cell = sut.storesCollectionView.cellForItem(at: indexPath) as! ListStoresCollectionViewCell
        
        // Then
        XCTAssertEqual(cell.title.text!, "Nike", "A properly configured cell should display the store name")
        XCTAssertNotNil(cell.imageView.image, "A properly configured cell should display the store image")
    }
    
    func testNumberOfRowsShouldBeEqualToNumberOfFetchedStores()
    {
        // Given
        loadView()
        sut.fetchedStores = Seeds.DisplayedStores.DummyStores
        
        // When
        let numberOfRows = sut.storesCollectionView.numberOfItems(inSection: 0)
        let numberOfFetchedStores = sut.fetchedStores?.count
        
        XCTAssertEqual(numberOfRows, numberOfFetchedStores, "number of rows in section 0 should be equal to fetched stores")
        
    }
    
    private func getConfiguredCollectionViewSpy() -> CollectionViewSpy
    {
        let collectionViewLayout = UICollectionViewFlowLayout()
        collectionViewLayout.itemSize = CGSize(width: 100, height: 100)
        return  CollectionViewSpy(frame: sut.view.frame, collectionViewLayout:  collectionViewLayout)
        
    }
    
}

